<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        wfacjwAAAABJRU5ErkJggg==
</value>
  </data>
</root>